# -*- coding: utf-8 -*-
"""Dashboard.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LS8kDInT28Xz_Sp0AUi4W75uqJQ-xcqL
"""

# ====================
# 1. Judul Dashboard
# ====================
st.set_page_config(page_title="Dashboard Sentimen TVRI 2024", layout="wide")
st.title("📊 Dashboard Analisis Sentimen Komentar YouTube TVRI 2024")
st.markdown("---")

# ====================
# 2. Upload Dataset
# ====================
uploaded_file = st.file_uploader("📂 Upload dataset hasil analisis (Excel/CSV)", type=["xlsx", "csv"])

if uploaded_file:
    if uploaded_file.name.endswith(".xlsx"):
        df = pd.read_excel(uploaded_file)
    else:
        df = pd.read_csv(uploaded_file)

    st.subheader("📌 Data Preview")
    st.dataframe(df.head())

    # Pastikan dataset punya kolom "comment", "sentiment", dan "true_label" (kalau ada)
    if "sentiment" not in df.columns:
        st.error("❌ Dataset harus punya kolom 'sentiment'.")
    else:
        # ====================
        # 3. Distribusi Sentimen
        # ====================
        st.subheader("📊 Distribusi Sentimen")
        sentiment_counts = df["sentiment"].value_counts()

        col1, col2 = st.columns(2)

        with col1:
            st.write("Tabel Distribusi Sentimen")
            st.table(sentiment_counts)

        with col2:
            fig, ax = plt.subplots()
            sns.barplot(x=sentiment_counts.index, y=sentiment_counts.values, ax=ax, palette="Set2")
            ax.set_xlabel("Sentimen")
            ax.set_ylabel("Jumlah Komentar")
            ax.set_title("Distribusi Sentimen")
            st.pyplot(fig)

        # ====================
        # 4. Wordcloud
        # ====================
        st.subheader("☁️ Wordcloud Komentar")
        all_words = " ".join(df["comment"].astype(str))
        wordcloud = WordCloud(width=1000, height=500, background_color="white").generate(all_words)

        fig_wc, ax_wc = plt.subplots(figsize=(12, 6))
        ax_wc.imshow(wordcloud, interpolation="bilinear")
        ax_wc.axis("off")
        st.pyplot(fig_wc)

        # ====================
        # 5. Filter Komentar
        # ====================
        st.subheader("🔍 Filter Komentar berdasarkan Sentimen")
        option = st.selectbox("Pilih sentimen:", df["sentiment"].unique())
        filtered = df[df["sentiment"] == option]
        st.write(filtered[["comment", "sentiment"]].head(20))

        # ====================
        # 6. Evaluasi Model
        # ====================
        if "true_label" in df.columns:
            st.subheader("📈 Evaluasi Model")

            y_true = df["true_label"]
            y_pred = df["sentiment"]

            # Classification report
            report = classification_report(y_true, y_pred, output_dict=True)
            report_df = pd.DataFrame(report).transpose()

            st.write("📌 Classification Report")
            st.dataframe(report_df)

            # Confusion Matrix
            st.write("📌 Confusion Matrix")
            cm = confusion_matrix(y_true, y_pred, labels=report_df.index[:-3])

            fig_cm, ax_cm = plt.subplots()
            sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=report_df.index[:-3], yticklabels=report_df.index[:-3], ax=ax_cm)
            ax_cm.set_xlabel("Predicted Label")
            ax_cm.set_ylabel("True Label")
            st.pyplot(fig_cm)
        else:
            st.info("⚠️ Tidak ada kolom 'true_label' → Evaluasi model tidak bisa ditampilkan.")

        # ====================
        # 7. Download Hasil
        # ====================
        st.subheader("💾 Download Hasil Analisis")
        buffer = io.BytesIO()
        df.to_csv(buffer, index=False)
        buffer.seek(0)

        st.download_button(
            label="⬇️ Download Data (CSV)",
            data=buffer,
            file_name="hasil_analisis_sentimen.csv",
            mime="text/csv"
        )
